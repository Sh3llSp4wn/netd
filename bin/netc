#!/usr/bin/env ruby
# frozen_string_literal: true

require 'netd_core'
require 'logger'
require 'zlib'
require 'base64'
require 'json'

require 'dry/cli'
require 'awesome_print'

module NetC
  # convention for dry/cli
  module Command
    # required to implement a cli command
    extend Dry::CLI::Registry

    # install the service file
    class Install < Dry::CLI::Command
      desc 'Install service file to systemd user directory'
      def call(**)
        # base64(zlib(netd.service))
        service_file_data = 'eJwljLEKgzAURfd8RZaueUJnl2KHLl1EOohDjFcNvMby8pT69xW7He65nLZJUT' \
                            'tTIQeJH41LKpsMsYwNbA/aYoAdF7FPaGVMW/+nzty/CLV60ZLWLNTHRLL2u73M5HgJninPXkAT3qegqy' \
                            'tccf4SdDhSj5TVM3fm5ZNiuO3lgNGvrO7ITlDzAyzzNxM='

        # reverse the encoding process for the systemd service file
        service_file = Zlib::Inflate.inflate(Base64.decode64(service_file_data))
        # path to install the file to
        fname = "#{Dir.home}/.config/systemd/user/netd.service"
        # write the decoded data to the file
        File.write(fname, service_file)

        # print install info
        puts "Wrote service file to #{fname}"
        puts "To enable the service, execute the following:\n"
        puts 'systemctl --user enable netd.service'
        puts 'systemctl --user start netd.service'
      end
    end

    # list current forwards
    class List < Dry::CLI::Command
      # list current forwards
      desc 'List the currently registered port forwards'
      def call(**)
        # open connection to server and
        # dispatch the list command
        NetDSvr.connect_to_netd do |socket|
          socket.puts 'list|'
          puts JSON.generate(NetDSvr.parse_list(socket))
        end
      end
    end

    module PortFwd
      # Local port forward
      class Local < Dry::CLI::Command
        desc 'Create a new local port forward'
        option :host, type: :String, default: '127.0.0.1', desc: 'Host address to bind to', required: true
        option :bind, type: :String, default: '127.0.0.1:8000', desc: 'Host address to bind to in <ip>:<port> format'
        option :remote, type: :String, desc: 'Remote address to connect to'
        option :del, default: false, desc: 'Delete the specified forward'

        def call(host:, bind:, remote:, del:, **)
          # decode the bind host host_port pair
          bind_addr, bind_port = bind.split(':')
          # decode the remote host host_port pair
          remote_addr, remote_port = remote.split(':')
          # connect to server and send local forward request
          NetDSvr.connect_to_netd do |socket|
            if !del
              socket.puts NetD::OperationRequest.local_port_forward(
                host, bind_port.to_i, bind_addr, remote_port.to_i, remote_addr
              )
            else
              socket.puts NetD::OperationRequest.delete_local_port_forward(host, remote_port.to_i, remote_addr)
            end
            puts socket.readline
          end
        end
      end

      # Remote port forward
      class Remote < Dry::CLI::Command
        desc 'Create a new remote port forward'
        option :host, type: :String, default: '127.0.0.1', desc: 'Host address to bind to', required: true
        option :bind, type: :String, default: '127.0.0.1:8000', desc: 'Remote address to bind to in <ip>:<port> format'
        option :local, type: :String, desc: 'Local address to connect to'
        option :del, default: false, desc: 'Delete the specified forward'

        def call(host:, bind:, local:, del:, **)
          # decode the remote bind host host_port pair
          bind_addr, bind_port = bind.split(':')
          # decode the local host host_port pair
          local_addr, local_port = local.split(':')
          # connect to server and send remote forward request
          NetDSvr.connect_to_netd do |socket|
            if !del
              socket.puts NetD::OperationRequest.remote_port_forward(
                host, bind_port.to_i, bind_addr, local_port.to_i, local_addr
              )
            else
              socket.puts NetD::OperationRequest.delete_remote_port_forward(host, local_port.to_i, local_addr)
            end
            puts socket.readline
          end
        end
      end
    end
    register 'install', Install
    register 'list', List
    register 'pfwd', aliases: ['p'] do |prefix|
      prefix.register 'local', PortFwd::Local
      prefix.register 'remote', PortFwd::Remote
    end
  end
end

def main
  Dry::CLI.new(NetC::Command).call
end

main
